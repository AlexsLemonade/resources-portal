# Generated by Django 2.2.13 on 2020-09-18 16:35

import uuid

import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import resources_portal.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=30, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_name", models.TextField(null=True)),
                ("orcid", models.TextField(null=True, unique=True)),
                ("orcid_refresh_token", models.TextField()),
                ("orcid_access_token", models.TextField()),
                ("viewed_notifications_at", models.DateTimeField(null=True)),
                ("deleted", models.BooleanField(default=False)),
                ("email", models.EmailField(max_length=254, verbose_name="email")),
                ("receive_non_assigned_notifs", models.BooleanField(default=False)),
                ("receive_weekly_digest", models.BooleanField(default=True)),
                ("weekly_digest_last_sent", models.DateTimeField(null=True)),
                (
                    "username",
                    models.CharField(
                        editable=False,
                        error_messages={"unique": "A user with that username already exists."},
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("full_name", models.TextField(editable=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={"ordering": ["created_at"], "get_latest_by": "created_at",},
            managers=[("objects", resources_portal.models.user.NonDeletedObjectsManager()),],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("saved_for_reuse", models.BooleanField(default=False)),
                ("name", models.TextField()),
                ("institution", models.TextField()),
                ("address_line_1", models.TextField()),
                ("address_line_2", models.TextField()),
                ("locality", models.TextField()),
                ("postal_code", models.TextField()),
                ("state", models.TextField()),
                ("country", models.TextField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "address",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("filename", models.TextField(help_text="The name of the attachment.", null=True)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="A description for the attachment.", null=True
                    ),
                ),
                (
                    "attachment_type",
                    models.CharField(
                        choices=[
                            ("MTA", "MTA"),
                            ("SIGNED_MTA", "SIGNED_MTA"),
                            ("EXECUTED_MTA", "EXECUTED_MTA"),
                            ("IRB", "IRB"),
                            ("SIGNED_IRB", "SIGNED_IRB"),
                            ("EXECUTED_IRB", "EXECUTED_IRB"),
                            ("SEQUENCE_MAP", "SEQUENCE_MAP"),
                        ],
                        max_length=32,
                    ),
                ),
                ("s3_bucket", models.CharField(blank=True, max_length=255, null=True)),
                ("s3_key", models.CharField(blank=True, max_length=255, null=True)),
                ("s3_resource_deleted", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "attachments",
                "ordering": ["updated_at", "id"],
                "get_latest_by": "updated_at",
            },
        ),
        migrations.CreateModel(
            name="Grant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.TextField()),
                ("funder_id", models.CharField(max_length=80)),
            ],
            options={
                "db_table": "grants",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="GrantMaterialAssociation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "grant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="resources_portal.Grant"
                    ),
                ),
            ],
            options={"db_table": "grant_material_associations",},
        ),
        migrations.CreateModel(
            name="GrantOrganizationAssociation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "grant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="resources_portal.Grant"
                    ),
                ),
            ],
            options={"db_table": "grant_organization_associations",},
        ),
        migrations.CreateModel(
            name="Material",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("CELL_LINE", "CELL_LINE"),
                            ("PLASMID", "PLASMID"),
                            ("PROTOCOL", "PROTOCOL"),
                            ("DATASET", "DATASET"),
                            ("MODEL_ORGANISM", "MODEL_ORGANISM"),
                            ("PDX", "PDX"),
                            ("OTHER", "OTHER"),
                        ],
                        max_length=32,
                    ),
                ),
                ("url", models.TextField(blank=True, null=True)),
                ("pubmed_id", models.CharField(blank=True, max_length=32)),
                (
                    "additional_metadata",
                    django.contrib.postgres.fields.jsonb.JSONField(default=dict),
                ),
                ("title", models.TextField(help_text="The title of the material.")),
                ("needs_irb", models.BooleanField(default=False, null=True)),
                ("needs_abstract", models.BooleanField(default=False, null=True)),
                ("imported", models.BooleanField(default=False)),
                (
                    "import_source",
                    models.CharField(
                        choices=[
                            ("GEO", "GEO"),
                            ("SRA", "SRA"),
                            ("DBGAP", "DBGAP"),
                            ("DATASET", "DATASET"),
                            ("PROTOCOLS_IO", "PROTOCOLS_IO"),
                            ("ADDGENE", "ADDGENE"),
                            ("JACKSON_LAB", "JACKSON_LAB"),
                            ("ATCC", "ATCC"),
                            ("ZIRC", "ZIRC"),
                            ("OTHER", "OTHER"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "organisms",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, null=True, size=None
                    ),
                ),
                ("publication_title", models.TextField(blank=True, null=True)),
                ("pre_print_doi", models.TextField(blank=True, null=True)),
                ("pre_print_title", models.TextField(blank=True, null=True)),
                ("citation", models.TextField(blank=True, null=True)),
                ("additional_info", models.TextField(blank=True, null=True)),
                ("embargo_date", models.DateField(blank=True, null=True)),
                ("is_archived", models.BooleanField(default=False)),
                (
                    "contact_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "grants",
                    models.ManyToManyField(
                        through="resources_portal.GrantMaterialAssociation",
                        to="resources_portal.Grant",
                    ),
                ),
                (
                    "mta_attachment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mta_materials",
                        to="resources_portal.Attachment",
                    ),
                ),
            ],
            options={
                "db_table": "materials",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="MaterialRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("rejection_reason", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "OPEN"),
                            ("APPROVED", "APPROVED"),
                            ("IN_FULFILLMENT", "IN_FULFILLMENT"),
                            ("FULFILLED", "FULFILLED"),
                            ("VERIFIED_FULFILLED", "VERIFIED_FULFILLED"),
                            ("REJECTED", "REJECTED"),
                            ("INVALID", "INVALID"),
                            ("CANCELLED", "CANCELLED"),
                        ],
                        default="OPEN",
                        max_length=32,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("SHIPPING_CODE", "SHIPPING_CODE"),
                            ("REIMBURSMENT", "REIMBURSMENT"),
                            ("OTHER_PAYMENT_METHODS", "OTHER_PAYMENT_METHODS"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("payment_method_notes", models.TextField(null=True)),
                ("requester_abstract", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(editable=False, null=True)),
                (
                    "address",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="requests",
                        to="resources_portal.Address",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "executed_mta_attachment",
                    models.ForeignKey(
                        help_text="Attachment containing the MTA after it has been signed by all parties.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="requests_executed_mta",
                        to="resources_portal.Attachment",
                    ),
                ),
                (
                    "irb_attachment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="requests_irb",
                        to="resources_portal.Attachment",
                    ),
                ),
                (
                    "material",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requests",
                        to="resources_portal.Material",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="material_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requester_signed_mta_attachment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="requests_signed_mta",
                        to="resources_portal.Attachment",
                    ),
                ),
            ],
            options={
                "db_table": "material_requests",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="MaterialRequestIssue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("OPEN", "OPEN"), ("CLOSED", "CLOSED")],
                        default="OPEN",
                        max_length=32,
                    ),
                ),
                (
                    "material_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="issues",
                        to="resources_portal.MaterialRequest",
                    ),
                ),
            ],
            options={
                "db_table": "material_request_issues",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField(help_text="The name of the organization.")),
                ("description", models.TextField()),
                ("is_personal_organization", models.BooleanField(default=False)),
                (
                    "grants",
                    models.ManyToManyField(
                        through="resources_portal.GrantOrganizationAssociation",
                        to="resources_portal.Grant",
                    ),
                ),
            ],
            options={
                "db_table": "organizations",
                "ordering": ["updated_at", "id"],
                "permissions": (
                    ("delete_resources", "delete_resources"),
                    ("add_members", "add_members"),
                    ("manage_permissions", "manage_permissions"),
                    ("add_owner", "add_owner"),
                    ("remove_members", "remove_members"),
                    ("add_resources", "add_resources"),
                    ("edit_resources", "edit_resources"),
                    ("archive_resources", "archive_resources"),
                    ("view_requests", "view_requests"),
                    ("approve_requests", "approve_requests"),
                ),
                "get_latest_by": "updated_at",
            },
        ),
        migrations.CreateModel(
            name="ShippingRequirement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("needs_shipping_address", models.BooleanField(default=False)),
                ("needs_payment", models.BooleanField(default=False)),
                ("sharer_pays_shipping", models.BooleanField(default=False)),
                ("accepts_shipping_code", models.BooleanField(default=False)),
                ("accepts_reimbursement", models.BooleanField(default=False)),
                ("accepts_other_payment_methods", models.BooleanField(default=False)),
                ("restrictions", models.TextField(blank=True, null=True)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "organization",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="resources_portal.Organization",
                    ),
                ),
            ],
            options={
                "db_table": "shipping_requirements",
                "ordering": ["updated_at", "id"],
                "get_latest_by": "updated_at",
            },
        ),
        migrations.CreateModel(
            name="OrganizationUserSetting",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("non_assigned_notifications", models.BooleanField(default=False)),
                ("weekly_digest", models.BooleanField(default=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_settings",
                        to="resources_portal.Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "organization_user_setting",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="OrganizationUserAssociation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.Organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "organization_user_associations",
                "unique_together": {("organization", "user")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationInvitation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("ACCEPTED", "ACCEPTED"),
                            ("REJECTED", "REJECTED"),
                            ("INVALID", "INVALID"),
                        ],
                        default="PENDING",
                        max_length=32,
                    ),
                ),
                (
                    "invite_or_request",
                    models.CharField(
                        choices=[("INVITE", "INVITE"), ("REQUEST", "REQUEST")],
                        default="INVITE",
                        max_length=32,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.Organization",
                    ),
                ),
                (
                    "request_receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "organization_invitations",
                "ordering": ["updated_at", "id"],
                "get_latest_by": "updated_at",
            },
        ),
        migrations.AddField(
            model_name="organization",
            name="members",
            field=models.ManyToManyField(
                through="resources_portal.OrganizationUserAssociation", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owned_organizations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            (
                                "MATERIAL_REQUEST_SHARER_ASSIGNED_NEW",
                                "MATERIAL_REQUEST_SHARER_ASSIGNED_NEW",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_RECEIVED",
                                "MATERIAL_REQUEST_SHARER_RECEIVED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_ASSIGNED",
                                "MATERIAL_REQUEST_SHARER_ASSIGNED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_ASSIGNMENT",
                                "MATERIAL_REQUEST_SHARER_ASSIGNMENT",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_APPROVED",
                                "MATERIAL_REQUEST_SHARER_APPROVED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_REJECTED",
                                "MATERIAL_REQUEST_SHARER_REJECTED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_CANCELLED",
                                "MATERIAL_REQUEST_SHARER_CANCELLED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_RECEIVED_INFO",
                                "MATERIAL_REQUEST_SHARER_RECEIVED_INFO",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_RECEIVED_MTA",
                                "MATERIAL_REQUEST_SHARER_RECEIVED_MTA",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_EXECUTED_MTA",
                                "MATERIAL_REQUEST_SHARER_EXECUTED_MTA",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_IN_FULFILLMENT",
                                "MATERIAL_REQUEST_SHARER_IN_FULFILLMENT",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_FULFILLED",
                                "MATERIAL_REQUEST_SHARER_FULFILLED",
                            ),
                            (
                                "MATERIAL_REQUEST_SHARER_VERIFIED",
                                "MATERIAL_REQUEST_SHARER_VERIFIED",
                            ),
                            (
                                "MATERIAL_REQUEST_ISSUE_SHARER_REPORTED",
                                "MATERIAL_REQUEST_ISSUE_SHARER_REPORTED",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_ACCEPTED",
                                "MATERIAL_REQUEST_REQUESTER_ACCEPTED",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_IN_FULFILLMENT",
                                "MATERIAL_REQUEST_REQUESTER_IN_FULFILLMENT",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_EXECUTED_MTA",
                                "MATERIAL_REQUEST_REQUESTER_EXECUTED_MTA",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_FULFILLED",
                                "MATERIAL_REQUEST_REQUESTER_FULFILLED",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_REJECTED",
                                "MATERIAL_REQUEST_REQUESTER_REJECTED",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_CANCELLED",
                                "MATERIAL_REQUEST_REQUESTER_CANCELLED",
                            ),
                            (
                                "MATERIAL_REQUEST_REQUESTER_ESCALATED",
                                "MATERIAL_REQUEST_REQUESTER_ESCALATED",
                            ),
                            ("MATERIAL_ADDED", "MATERIAL_ADDED"),
                            ("MATERIAL_ARCHIVED", "MATERIAL_ARCHIVED"),
                            ("MATERIAL_DELETED", "MATERIAL_DELETED"),
                            ("ORGANIZATION_NEW_MEMBER", "ORGANIZATION_NEW_MEMBER"),
                            ("ORGANIZATION_BECAME_OWNER", "ORGANIZATION_BECAME_OWNER"),
                            ("ORGANIZATION_NEW_OWNER", "ORGANIZATION_NEW_OWNER"),
                            ("ORGANIZATION_MEMBER_LEFT", "ORGANIZATION_MEMBER_LEFT"),
                            ("ORGANIZATION_NEW_GRANT", "ORGANIZATION_NEW_GRANT"),
                            ("ORGANIZATION_INVITE", "ORGANIZATION_INVITE"),
                            ("REPORT_TO_GRANTS_TEAM", "REPORT_TO_GRANTS_TEAM"),
                        ],
                        max_length=64,
                    ),
                ),
                ("message", models.TextField(null=True)),
                ("email", models.EmailField(max_length=254, null=True)),
                ("email_delivered_at", models.DateTimeField(null=True)),
                ("text_body", models.TextField(editable=False, null=True)),
                ("email_delivered", models.BooleanField(editable=False, null=True)),
                (
                    "associated_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "grant",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.Grant",
                    ),
                ),
                (
                    "material",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.Material",
                    ),
                ),
                (
                    "material_request",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.MaterialRequest",
                    ),
                ),
                (
                    "material_request_issue",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.MaterialRequestIssue",
                    ),
                ),
                (
                    "notified_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources_portal.Organization",
                    ),
                ),
            ],
            options={
                "db_table": "notifications",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="MaterialShareEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("event_type", models.CharField(blank=True, max_length=255, null=True)),
                ("time", models.DateTimeField()),
                (
                    "assigned_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="material_share_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="material_share_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "material",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="share_events",
                        to="resources_portal.Material",
                    ),
                ),
            ],
            options={
                "db_table": "material_share_events",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.AddField(
            model_name="material",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="materials",
                to="resources_portal.Organization",
            ),
        ),
        migrations.AddField(
            model_name="material",
            name="shipping_requirement",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="resources_portal.ShippingRequirement",
            ),
        ),
        migrations.AddField(
            model_name="grantorganizationassociation",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="resources_portal.Organization"
            ),
        ),
        migrations.AddField(
            model_name="grantmaterialassociation",
            name="material",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="resources_portal.Material"
            ),
        ),
        migrations.AddField(
            model_name="grant",
            name="materials",
            field=models.ManyToManyField(
                through="resources_portal.GrantMaterialAssociation", to="resources_portal.Material"
            ),
        ),
        migrations.AddField(
            model_name="grant",
            name="organizations",
            field=models.ManyToManyField(
                through="resources_portal.GrantOrganizationAssociation",
                to="resources_portal.Organization",
            ),
        ),
        migrations.AddField(
            model_name="grant",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="grants",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="FulfillmentNote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "material_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fulfillment_notes",
                        to="resources_portal.MaterialRequest",
                    ),
                ),
            ],
            options={
                "db_table": "fulfillment_notes",
                "ordering": ["created_at", "id"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.AddField(
            model_name="attachment",
            name="owned_by_org",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attachments",
                to="resources_portal.Organization",
            ),
        ),
        migrations.AddField(
            model_name="attachment",
            name="owned_by_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owned_attachments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="attachment",
            name="sequence_map_for",
            field=models.ForeignKey(
                default=None,
                help_text="The cell line this seq_map is for. Only valid for seq_map attachments.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sequence_maps",
                to="resources_portal.Material",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="organizations",
            field=models.ManyToManyField(
                through="resources_portal.OrganizationUserAssociation",
                to="resources_portal.Organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="personal_organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="resources_portal.Organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grantorganizationassociation", unique_together={("grant", "organization")},
        ),
        migrations.AlterUniqueTogether(
            name="grantmaterialassociation", unique_together={("grant", "material")},
        ),
    ]
